// 반복자정리
// 
// 1. 반복자 개념
// => 포인터 처럼 동작 하는 객체
// => 컨테이너의 내부 구조에 상관없이 "동일하게 열거"하기 위해
//    (연산자 재정의 기술로 포인터 처럼 보이게 한 것 )

// 2. 반복자의 형태
// A. 컨테이너에서 꺼내기 - 4가지 종류(begin(), rbegin(), cbegin(), crbegin())
// B. 독립적으로 만들어서 사용 - 삽입반복자 3개, 스트림 반복자, 파일시스템반복자


// 3. 중요한 핵심!!
// => 반복자의 무효화 현상 ( invalidate )
//    vector.resize(10);  이순간 이전에 꺼낸 반복자는 사용할수 없게 된다.

// => 반복자 category 5개 ( 입력, 출력, 전진, 양방향, 임의접근)
//    1. 각 컨테이너의 반복자는 어떤 종류 인가?
//       std::forward_list : 전진형 
//       std::list   : 양방향
//       std::vector : 임의 접근

//    2. 각 알고리즘은 어떤 반복자를 요구 하는가 ?
//		std::find	 : 입력
//		std::reverse :  양방향
//		std::sort	 :  임의접근

// 4. 반복자 이동 
// => 한칸   이동 : ++p 로 하세요. 모든 반복자는 ++ 지원 
// => 여러칸 이동 : p = p + 5 => 임의접근만 가능
//                std::advance(p, 5); => 모든 반복자에 가능.

// 5. 반복자가 가리키는 타입
//    => typename Iter::value_type

// 6. 남은 것 : iterator_traits => 오늘 마지막 시간에..
